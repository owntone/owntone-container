name: OwnTone Container Parallelized

on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:
    inputs:
      commit:
        description: 'Commit identifier'
        required: false
      staging:
        description: 'Include tag ''staging'''
        required: false
        type: boolean
      version:
        description: 'Version identifier'
        required: false
      latest:
        description: 'Include tag ''latest'''
        required: false
        type: boolean

env:
  NAME: ${{ vars.NAME }}
  NAMESPACE: ${{ vars.NAMESPACE }}
  REPOSITORY_BRANCH: ${{ vars.REPOSITORY_BRANCH }}
  REPOSITORY_URL: ${{ vars.REPOSITORY_URL }}

jobs:
  preparation:
    runs-on: ubuntu-latest
    outputs:
      commit: ${{ steps.variables.outputs.commit }}
      version: ${{ steps.variables.outputs.version }}
    steps:
      - name: Determine variables
        id: variables
        run: |
          registry=https://hub.docker.com/v2/namespaces/$NAMESPACE/repositories/$NAME/tags
          git clone -q -b $REPOSITORY_BRANCH $REPOSITORY_URL source
          cd source
          commit=$(git log --branches -1 --pretty=format:"%h")
          [[ $(curl -LI ${registry}/${commit} -o /dev/null -w '%{http_code}\n' -s) = "200" ]] && commit=${{ github.event.inputs.commit }}
          echo "commit=${commit}" >> $GITHUB_OUTPUT
          version=$(git describe --tags $(git rev-list --tags --max-count=1))
          [[ $(curl -LI ${registry}/${version} -o /dev/null -w '%{http_code}\n' -s) = "200" ]] && version=${{ github.event.inputs.version }}
          echo "version=${version}" >> $GITHUB_OUTPUT

  setup:
    runs-on: ubuntu-latest
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Sign into Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

  staging-build:
    needs: [preparation, setup]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform: ['linux/amd64', 'linux/arm64', 'linux/arm/v7']
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.preparation.outputs.commit }}
      - name: Build staging image for ${{ matrix.platform }}
        uses: docker/build-push-action@v6
        with:
          build-args: |
            REPOSITORY_URL=${{ env.REPOSITORY_URL }}
            REPOSITORY_BRANCH=${{ env.REPOSITORY_BRANCH }}
            REPOSITORY_COMMIT=${{ needs.preparation.outputs.commit }}
          context: .
          platforms: ${{ matrix.platform }}
          outputs: type=registry,name=${{ env.NAMESPACE }}/${{ env.NAME }},push=false

  staging-merge:
    needs: [staging-build]
    runs-on: ubuntu-latest
    steps:
      - name: Create and push multi-architecture staging image
        run: |
          docker buildx imagetools create \
            --tag ${{ env.NAMESPACE }}/${{ env.NAME }}:${{ needs.preparation.outputs.commit }} \
            --tag ${{ env.NAMESPACE }}/${{ env.NAME }}:staging \
            ${{ env.NAMESPACE }}/${{ env.NAME }}:linux/amd64 \
            ${{ env.NAMESPACE }}/${{ env.NAME }}:linux/arm64 \
            ${{ env.NAMESPACE }}/${{ env.NAME }}:linux/arm/v7

  production-build:
    needs: [preparation, setup]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform: ['linux/amd64', 'linux/arm64', 'linux/arm/v7']
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.preparation.outputs.version }}

      - name: Build production image for ${{ matrix.platform }}
        uses: docker/build-push-action@v6
        with:
          build-args: |
            REPOSITORY_URL=${{ env.REPOSITORY_URL }}
            REPOSITORY_BRANCH=${{ env.REPOSITORY_BRANCH }}
            REPOSITORY_VERSION=${{ needs.preparation.outputs.version }}
          context: .
          platforms: ${{ matrix.platform }}
          outputs: type=registry,name=${{ env.NAMESPACE }}/${{ env.NAME }},push=false

  production-merge:
    needs: [production-build]
    runs-on: ubuntu-latest
    steps:
      - name: Create and push multi-architecture production image
        run: |
          docker buildx imagetools create \
            --tag ${{ env.NAMESPACE }}/${{ env.NAME }}:${{ needs.preparation.outputs.version }} \
            --tag ${{ env.NAMESPACE }}/${{ env.NAME }}:latest \
            ${{ env.NAMESPACE }}/${{ env.NAME }}:linux/amd64 \
            ${{ env.NAMESPACE }}/${{ env.NAME }}:linux/arm64 \
            ${{ env.NAMESPACE }}/${{ env.NAME }}:linux/arm/v7
